# Build and test Kokkos FFT using Docker and Singularity images. Pre-generated
# images are pulled from Github registry; they are updated only if the current
# PR or commit modified the Docker files.

name: CI

on:
  pull_request:
    branches:
      - main

env:
  # Force the use of BuildKit for Docker
  DOCKER_BUILDKIT: 1

jobs:
  # [TO DO] Modularize the small actions for better readability
  # of the main workflow file
  
  # run linter on the code
  clang-format-check:
    uses: ./.github/workflows/__clang-format-check.yaml
    permissions:
      contents: read

  # run cmake format check
  cmake-format-check:
    uses: ./.github/workflows/__cmake-format-check.yaml
    permissions:
      contents: read

  # run typos for spell check
  spell-check:
    name: spell check with typos
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
    - uses: crate-ci/typos@a4c3e43aea0a9e9b9e6578d2731ebd9a27e8f6cd  # v1.35.5
      with:
        files: ./cmake/ ./CMakeLists.txt ./distributed/ ./README.md ./examples/
        config: ./.typos.toml

  # build project
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        backend:
          - name: clang-tidy
            image: clang
            compiler:
              cxx: clang++
            cmake_flags:
              cxx_standard: 17
              kokkos: -DKokkos_ENABLE_SERIAL=ON
              kokkos_fft: -DCMAKE_CXX_FLAGS="-Wall -Wextra" -DCMAKE_COMPILE_WARNING_AS_ERROR=ON -DCMAKE_CXX_CLANG_TIDY="clang-tidy;-warnings-as-errors=*"
              distributed_fft: -DENABLE_TESTS=ON -DENABLE_EXAMPLES=ON
            cmake_build_type: Debug
          - name: openmp
            image: gcc
            compiler:
              cxx: g++
            cmake_flags:
              cxx_standard: 17
              kokkos: -DKokkos_ENABLE_OPENMP=ON -DKokkos_ENABLE_SERIAL=ON
              kokkos_fft: -DCMAKE_CXX_FLAGS="-Wall -Wextra" -DCMAKE_COMPILE_WARNING_AS_ERROR=ON
              distributed_fft: -DENABLE_TESTS=ON -DENABLE_EXAMPLES=ON
            cmake_build_type: Debug
          - name: threads
            image: gcc
            compiler:
              cxx: g++
            cmake_flags:
              cxx_standard: 20
              kokkos: -DKokkos_ENABLE_THREADS=ON
              kokkos_fft: -DCMAKE_CXX_FLAGS="-Wall -Wextra" -DCMAKE_COMPILE_WARNING_AS_ERROR=ON
              distributed_fft: -DENABLE_TESTS=ON -DENABLE_EXAMPLES=ON
            cmake_build_type: Release
          - name: serial
            image: gcc
            compiler:
              cxx: g++
            cmake_flags:
              cxx_standard: 17
              kokkos: -DKokkos_ENABLE_SERIAL=ON
              kokkos_fft: -DCMAKE_CXX_FLAGS="-Wall -Wextra" -DCMAKE_COMPILE_WARNING_AS_ERROR=ON
              distributed_fft: -DENABLE_TESTS=ON -DENABLE_EXAMPLES=ON
            cmake_build_type: Release
          - name: cuda
            image: nvcc
            compiler:
              cxx: g++
            cmake_flags:
              cxx_standard: 20
              kokkos: -DKokkos_ENABLE_CUDA=ON -DKokkos_ARCH_AMPERE80=ON -DKokkos_ENABLE_OPENMP=ON -DKokkos_ENABLE_SERIAL=ON
              kokkos_fft: -DCMAKE_CXX_FLAGS="-Wall -Wextra -Werror"
              distributed_fft: -DENABLE_TESTS=ON -DENABLE_EXAMPLES=ON
            cmake_build_type: Release
          - name: nvhpc
            image: nvhpc
            compiler:
              cxx: nvc++
            cmake_flags:
              cxx_standard: 20
              kokkos: -DKokkos_ENABLE_CUDA=ON -DKokkos_ARCH_AMPERE80=ON
              kokkos_fft: -DCMAKE_CXX_FLAGS="-Wall -Wextra -Werror"
              distributed_fft: -DENABLE_CUFFT_MP=ON -DENABLE_TESTS=ON
            cmake_build_type: Release
          - name: hip
            image: rocm
            compiler:
              cxx: hipcc
            cmake_flags:
              cxx_standard: 17
              kokkos: -DKokkos_ENABLE_HIP=ON -DKokkos_ARCH_VEGA90A=ON -DKokkos_ENABLE_THREADS=ON
              kokkos_fft: -DCMAKE_CXX_FLAGS="-Wall -Wextra -Werror"
              distributed_fft: -DENABLE_TESTS=ON -DENABLE_EXAMPLES=ON
            cmake_build_type: Release
          - name: rocm
            image: rocm
            compiler:
              cxx: hipcc
            cmake_flags:
              cxx_standard: 20
              kokkos: -DKokkos_ENABLE_HIP=ON -DKokkos_ARCH_VEGA90A=ON
              kokkos_fft: -DCMAKE_CXX_FLAGS="-Wall -Wextra -Werror" -DKokkosFFT_ENABLE_ROCFFT=ON
              distributed_fft: -DENABLE_TESTS=ON -DENABLE_EXAMPLES=ON
            cmake_build_type: Release
          ##- name: sycl
          ##  image: intel
          ##  compiler:
          ##    cxx: icpx
          ##  cmake_flags:
          ##    # building for Intel PVC was unsuccessful without the proper
          ##    # device, so for now, we simply generate generic Intel GPU code
          ##    cxx_standard: 17
          ##    kokkos: -DKokkos_ENABLE_SYCL=ON -DKokkos_ARCH_INTEL_GEN=ON
          ##    kokkos_fft: -DCMAKE_CXX_FLAGS="-Wall -Wextra"
          ##  cmake_build_type: Release
        target:
          - name: native
            cmake_flags: ""
          - name: host_device
            cmake_flags: -DKokkosFFT_ENABLE_FFTW=ON
        exclude:
          - backend:
              name: clang-tidy
            target:
              name: host_device
          - backend:
              name: openmp
            target:
              name: host_device
          - backend:
              name: threads
            target:
              name: host_device
          - backend:
              name: serial
            target:
              name: host_device

    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be  # v1.3.1
        with:
          tool-cache: true
          large-packages: false

      - name: Checkout built branch
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          submodules: recursive

      - name: Configure
        run: |
          docker run -v ${{ github.workspace }}:/work ghcr.io/yasahi-hpc/distributed-fft/base_${{ matrix.backend.image }}:latest \
            cmake -B build \
            -DCMAKE_BUILD_TYPE=${{ matrix.backend.cmake_build_type }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.backend.compiler.cxx }} \
            -DCMAKE_CXX_STANDARD=${{ matrix.backend.cmake_flags.cxx_standard }} \
            -DENABLE_INTERNAL_KOKKOS=ON \
            -DENABLE_INTERNAL_KOKKOSFFT=ON \
            ${{ matrix.backend.cmake_flags.kokkos }} \
            ${{ matrix.backend.cmake_flags.kokkos_fft }} \
            ${{ matrix.backend.cmake_flags.distributed_fft }} \
            ${{ matrix.target.cmake_flags }}

      - name: Build
        run: |
          docker run -v ${{ github.workspace }}:/work ghcr.io/yasahi-hpc/distributed-fft/base_${{ matrix.backend.image }}:latest \
            cmake --build build -j 2 -- VERBOSE=1

      - name: Prepare artifacts
        # this is mandatory to preserve execution rights
        run: tar -cvf tests_${{ matrix.backend.name }}.tar build/
        if: ${{ matrix.target.name == 'native' }}

      - name: Save artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        with:
          name: tests_${{ matrix.backend.name }}
          path: tests_${{ matrix.backend.name }}.tar
        if: ${{ matrix.target.name == 'native' }}

      - name: Configure, build and install Kokkos as library
        run: |
          docker run -v ${{ github.workspace }}:/work ghcr.io/yasahi-hpc/distributed-fft/base_${{ matrix.backend.image }}:latest \
            cmake -B build_kokkos \
            -DCMAKE_INSTALL_PREFIX=/work/install \
            -DCMAKE_BUILD_TYPE=${{ matrix.backend.cmake_build_type }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.backend.compiler.cxx }} \
            -DCMAKE_CXX_STANDARD=${{ matrix.backend.cmake_flags.cxx_standard }} \
            ${{ matrix.backend.cmake_flags.kokkos }} \
            tpls/kokkos
          docker run -v ${{ github.workspace }}:/work ghcr.io/yasahi-hpc/distributed-fft/base_${{ matrix.backend.image }}:latest \
            cmake --build build_kokkos -j 4
          docker run -v ${{ github.workspace }}:/work ghcr.io/yasahi-hpc/distributed-fft/base_${{ matrix.backend.image }}:latest \
            cmake --install build_kokkos

      - name: Configure, build and install KokkosFFT as library
        run: |
          docker run -v ${{ github.workspace }}:/work ghcr.io/yasahi-hpc/distributed-fft/base_${{ matrix.backend.image }}:latest \
            cmake -B build_kokkos_fft \
            -DCMAKE_INSTALL_PREFIX=/work/install\
            -DCMAKE_PREFIX_PATH=/work/install \
            -DCMAKE_BUILD_TYPE=${{ matrix.backend.cmake_build_type }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.backend.compiler.cxx }} \
            -DCMAKE_CXX_STANDARD=${{ matrix.backend.cmake_flags.cxx_standard }} \
            ${{ matrix.backend.cmake_flags.kokkos_fft }} \
            ${{ matrix.target.cmake_flags }} \
            tpls/kokkos-fft
          docker run -v ${{ github.workspace }}:/work ghcr.io/yasahi-hpc/distributed-fft/base_${{ matrix.backend.image }}:latest \
            cmake --build build_kokkos_fft -j 4
          docker run -v ${{ github.workspace }}:/work ghcr.io/yasahi-hpc/distributed-fft/base_${{ matrix.backend.image }}:latest \
            cmake --install build_kokkos_fft

      - name: Configure and build the project
        run: |
          docker run -v ${{ github.workspace }}:/work ghcr.io/yasahi-hpc/distributed-fft/base_${{ matrix.backend.image }}:latest \
            cmake -B build_installed \
            -DCMAKE_BUILD_TYPE=${{ matrix.backend.cmake_build_type }} \
            -DCMAKE_PREFIX_PATH=/work/install \
            -DCMAKE_CXX_COMPILER=${{ matrix.backend.compiler.cxx }} \
            -DCMAKE_CXX_STANDARD=${{ matrix.backend.cmake_flags.cxx_standard }} \
            ${{ matrix.backend.cmake_flags.distributed_fft }}
          docker run -v ${{ github.workspace }}:/work ghcr.io/yasahi-hpc/distributed-fft/base_${{ matrix.backend.image }}:latest \
            cmake --build build_installed -j 2

  # test the project
  test:
    runs-on: ${{ matrix.backend.runner }}
    continue-on-error: ${{ matrix.backend.unstable }}

    needs:
      - build

    strategy:
      matrix:
        backend:
          # run OpenMP tests on Azure server
          - name: openmp
            image: gcc
            runner: ubuntu-latest
            unstable: false
          # run Threads tests on Azure server
          - name: threads
            image: gcc
            runner: ubuntu-latest
            unstable: false
          # run Serial tests on Azure server
          - name: serial
            image: gcc
            runner: ubuntu-latest
            unstable: false

    steps:
      - name: Get artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0  # v5.0.0
        with:
          name: tests_${{ matrix.backend.name }}

      - name: Deploy artifacts
        run: tar -xvf tests_${{ matrix.backend.name }}.tar

      - name: Login in GitHub Containers Repository with Docker
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1  # v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run OpenMP/Threads/Serial tests within Docker image
        run: |
          docker run -v $PWD/build:/work/build -w /work/build ghcr.io/yasahi-hpc/distributed-fft/base_${{ matrix.backend.image }}:latest \
          bash -c "useradd -m -u 1001 testuser && \
          sudo -u testuser ctest --output-on-failure"
